datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

enum Gender {
  MASCULINO
  FEMENINO
  OTRO
}

model Estado {
  id          Int           @id @default(autoincrement())
  Friendships Friendships[]
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  lastname              String?
  birthdate             DateTime?
  country               String?
  gender                Gender?
  email                 String?                @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  enviado   Friendships[] @relation("UsuarioEnvia")
  recibido  Friendships[] @relation("UsuarioRecibe")
  posts     Post[]
  comments  Comment[]
  followers Follow[]      @relation("Followed")
  following Follow[]      @relation("Follower")
}

model Friendships {
  id             Int      @id @default(autoincrement())
  usuarioEnvia   User     @relation("UsuarioEnvia", fields: [usuarioId1], references: [id])
  usuarioId1     String
  usuarioRecibe  User     @relation("UsuarioRecibe", fields: [usuarioId2], references: [id])
  usuarioId2     String
  estado         Estado   @relation(fields: [estadoId], references: [id])
  estadoId       Int
  fechaSolicitud DateTime @default(now())

  @@unique([usuarioId1, usuarioId2])
}

model Post {
  id        String    @id @default(cuid())
  userId    String    @map("id_user")
  postText  String?
  postImage String?
  createdAt DateTime  @default(now()) @map("created_at")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]

  @@map("post")
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    String   @map("id_post")
  userId    String   @map("id_user")
  content   String?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Follow {
  id         Int    @id @default(autoincrement())
  follower   User   @relation("Follower", fields: [followerId], references: [id])
  followerId String
  followed   User   @relation("Followed", fields: [followedId], references: [id])
  followedId String

  @@unique([followerId, followedId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
